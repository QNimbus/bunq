# generated by datamodel-codegen:
#   filename:  rules.schema.json
#   timestamp: 2023-11-05T09:58:39+00:00

from __future__ import annotations

from enum import Enum
from typing import List, Optional, Union

from pydantic import BaseModel, ConfigDict, Field, RootModel


class ActionType(Enum):
    CREATE_REQUEST = 'CREATE_REQUEST'


class Action(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    type: ActionType = Field(..., title='Action Type')
    data: str


class ActionDefinition(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    action: Action


class RuleType(Enum):
    REGEX = 'REGEX'
    EQUALS = 'EQUALS'
    DOES_NOT_EQUAL = 'DOES_NOT_EQUAL'
    IS_EMPTY = 'IS_EMPTY'
    IS_NOT_EMPTY = 'IS_NOT_EMPTY'
    IS_NEGATIVE = 'IS_NEGATIVE'
    IS_POSITIVE = 'IS_POSITIVE'
    CONTAINS = 'CONTAINS'
    DOES_NOT_CONTAIN = 'DOES_NOT_CONTAIN'


class Rule(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    name: Optional[str] = None
    type: RuleType = Field(..., title='Rule Type')
    value: Optional[Union[str, List[str]]] = None
    property: str


class Condition(Enum):
    ALL = 'ALL'
    ANY = 'ANY'
    NONE = 'NONE'


class RuleGroup(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    name: Optional[str] = None
    condition: Condition
    rules: List[Union[Rule, RuleGroup]]


class RuleRoot(ActionDefinition, Rule):
    pass


class RuleGroupRoot(ActionDefinition, RuleGroup):
    pass


class Rules(RootModel[List[Union[RuleRoot, RuleGroupRoot]]]):
    root: List[Union[RuleRoot, RuleGroupRoot]] = Field(..., title='Rules')


RuleGroup.model_rebuild()
