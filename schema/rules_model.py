# generated by datamodel-codegen:
#   filename:  rules.schema.json
#   timestamp: 2023-12-04T19:35:02+00:00

from __future__ import annotations

from enum import Enum
from typing import List, Optional, Union

from pydantic import BaseModel, ConfigDict, Field, RootModel


class ActionType(Enum):
    DUMMY = 'DUMMY'
    REQUEST_FROM_PAYMENT = 'REQUEST_FROM_PAYMENT'
    FORWARD_REMAINING_BALANCE = 'FORWARD_REMAINING_BALANCE'
    FORWARD_INCOMING_PAYMENT = 'FORWARD_INCOMING_PAYMENT'
    FORWARD_PAYMENT = 'FORWARD_PAYMENT'


class PropertyRuleType(Enum):
    REGEX = 'REGEX'
    EQUALS = 'EQUALS'
    DOES_NOT_EQUAL = 'DOES_NOT_EQUAL'
    IS_EMPTY = 'IS_EMPTY'
    IS_NOT_EMPTY = 'IS_NOT_EMPTY'
    IS_NEGATIVE = 'IS_NEGATIVE'
    IS_POSITIVE = 'IS_POSITIVE'
    CONTAINS = 'CONTAINS'
    DOES_NOT_CONTAIN = 'DOES_NOT_CONTAIN'


class RuleThatActsOnAProperty(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    type: PropertyRuleType = Field(..., title='Property rule type')
    description: Optional[str] = None
    property: Optional[str] = None
    case_sensitive: Optional[bool] = Field(True, title='Case sensitive comparison')
    value: Optional[Union[str, List[str]]] = None


class BalanceRuleType(Enum):
    BALANCE_DECREASED = 'BALANCE_DECREASED'
    BALANCE_INCREASED = 'BALANCE_INCREASED'
    BALANCE_INCREASED_BY = 'BALANCE_INCREASED_BY'
    BALANCE_DECREASED_BY = 'BALANCE_DECREASED_BY'


class By(Enum):
    EXACT = 'EXACT'
    AT_LEAST = 'AT_LEAST'
    AT_MOST = 'AT_MOST'


class RuleThatActsOnBalance(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    type: BalanceRuleType = Field(..., title='Balance rule type')
    description: Optional[str] = None
    value: Optional[float] = None
    by: Optional[By] = 'EXACT'


class RuleCondition(Enum):
    ALL = 'ALL'
    ANY = 'ANY'
    NONE = 'NONE'


class EventType(Enum):
    MUTATION_CREATED = 'MUTATION_CREATED'
    MUTATION_RECEIVED = 'MUTATION_RECEIVED'
    PAYMENT_CREATED = 'PAYMENT_CREATED'
    PAYMENT_RECEIVED = 'PAYMENT_RECEIVED'
    CARD_PAYMENT_ALLOWED = 'CARD_PAYMENT_ALLOWED'
    CARD_TRANSACTION_NOT_ALLOWED = 'CARD_TRANSACTION_NOT_ALLOWED'
    REQUEST_INQUIRY_CREATED = 'REQUEST_INQUIRY_CREATED'
    REQUEST_INQUIRY_ACCEPTED = 'REQUEST_INQUIRY_ACCEPTED'
    REQUEST_INQUIRY_REJECTED = 'REQUEST_INQUIRY_REJECTED'
    REQUEST_RESPONSE_CREATED = 'REQUEST_RESPONSE_CREATED'
    REQUEST_RESPONSE_ACCEPTED = 'REQUEST_RESPONSE_ACCEPTED'
    REQUEST_RESPONSE_REJECTED = 'REQUEST_RESPONSE_REJECTED'


class BankAccount(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    iban: str
    name: str


class RuleGroup(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    description: Optional[str] = None
    condition: RuleCondition
    rules: List[Union[Union[RuleThatActsOnAProperty, RuleThatActsOnBalance], RuleGroup]]


class CreateRequestActionData(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    amount_value_property: Optional[str] = 'amount.value'
    ignore_own_accounts: Optional[bool] = True
    request_from: BankAccount
    description: Optional[str] = None


class ForwardPaymentActionData(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    amount_value_property: Optional[str] = 'amount.value'
    allow_third_party_accounts: Optional[bool] = False
    forward_payment_to: BankAccount
    description: Optional[str] = None


class ForwardRemainingBalanceActionData(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    forward_remaining_balance_to: BankAccount
    description: Optional[str] = None


class Action(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    type: ActionType = Field(..., title='Action Type')
    events: List[EventType] = Field(..., title='Event types')
    data: Optional[
        Union[
            CreateRequestActionData,
            ForwardPaymentActionData,
            ForwardRemainingBalanceActionData,
        ]
    ] = None
    dry_run: Optional[bool] = False


class RuleRoot(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    name: Optional[str] = None
    action: Action
    rule: Union[Union[RuleThatActsOnAProperty, RuleThatActsOnBalance], RuleGroup]


class Rules(RootModel[List[RuleRoot]]):
    root: List[RuleRoot] = Field(..., title='Rules')


RuleGroup.model_rebuild()
